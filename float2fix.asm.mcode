0: inst = 9'b100_000000;
1: inst = 9'b000_010_001; //r2 = 0
2: inst = 9'b000_011_001; //r3 = 0
3: inst = 9'b000_100_001; //r4 = 0
4: inst = 9'b000_101_001; //r5 = 0
5: inst = 9'b000_110_001; //r6 = 0
6: inst = 9'b000_111_001; //r7 = 0
7: inst = 9'b100_000000;
8: inst = 9'b000_000_001;
9: inst = 9'b100_111101;
10: inst = 9'b001_000_001;
11: inst = 9'b0110_000_01;
12: inst = 9'b100_000010;
13: inst = 9'b001_001_000;
14: inst = 9'b110_001_110; //store branch addr for done in [0]
15: inst = 9'b100_100001;
16: inst = 9'b001_010_001; //r2 = 33
17: inst = 9'b0110_010_01; //r2 = 132
18: inst = 9'b100_000001;
19: inst = 9'b001_010_001; //r2 = 133
20: inst = 9'b101_011_010; //r3 = MSW = [133]
21: inst = 9'b001_010_001; //r2 = 134
22: inst = 9'b101_100_010; //r4 = LSW = [134]
23: inst = 9'b000_010_101; //r2 = 0
24: inst = 9'b001_010_011; //r2 = MSW
25: inst = 9'b0110_010_00;
26: inst = 9'b0111_010_10; //r2 = MSW[6:2] = E
27: inst = 9'b100_100000;
28: inst = 9'b0110_001_01; //r1 = 0b10000000
29: inst = 9'b001_101_001; //r5 = 0b10000000
30: inst = 9'b000_101_011; //r5 = 0b10000000 & MSW = signbit
31: inst = 9'b100_000011;
32: inst = 9'b000_011_001; //clear top 6 bits of MSW
33: inst = 9'b100_000100;
34: inst = 9'b001_011_001; //prepdend H	PC = 27
35: inst = 9'b100_100111;
36: inst = 9'b111_010_111; //dont append H if E == 0
37: inst = 9'b100_000011;
38: inst = 9'b000_011_001; //clear top 6 bits of MSW	PC = 38
39: inst = 9'b100_011110;
40: inst = 9'b001_110_001; //r6 = 30
41: inst = 9'b001_111_001; //r7 = 30
42: inst = 9'b000_110_010; //r6 = 30 & E
43: inst = 9'b100_111011; //regime 2
44: inst = 9'b111_110_111; //r6 is 30 if E is 30 or 31
45: inst = 9'b100_000000;
46: inst = 9'b000_011_001;
47: inst = 9'b000_100_001;
48: inst = 9'b000_110_001;
49: inst = 9'b100_111111;
50: inst = 9'b001_100_001;
51: inst = 9'b0110_100_01;
52: inst = 9'b100_000011;
53: inst = 9'b001_100_001;
54: inst = 9'b001_011_100;
55: inst = 9'b0111_011_00;
56: inst = 9'b100_000000;
57: inst = 9'b101_001_001;
58: inst = 9'b111_011_100; //force branch (pseudo jump instr)
59: inst = 9'b100_000000; //PC = 59
60: inst = 9'b000_110_001;
61: inst = 9'b000_111_001;
62: inst = 9'b100_111100; //
63: inst = 9'b001_110_001;
64: inst = 9'b0110_110_01;
65: inst = 9'b100_000010;
66: inst = 9'b001_110_001;
67: inst = 9'b001_110_010;
68: inst = 9'b100_001100;
69: inst = 9'b000_110_001;
70: inst = 9'b001_111_001;
71: inst = 9'b100_000000;
72: inst = 9'b000_000_001;
73: inst = 9'b100_011100;
74: inst = 9'b001_000_001;
75: inst = 9'b0110_000_01;
76: inst = 9'b100_000001;
77: inst = 9'b001_001_000;
78: inst = 9'b111_110_111;
79: inst = 9'b100_000000;
80: inst = 9'b000_110_001;
81: inst = 9'b000_111_001;
82: inst = 9'b0110_011_00;
83: inst = 9'b100_100000;
84: inst = 9'b0110_001_01; //r1 = 0b10000000
85: inst = 9'b001_110_001; //r6 = 0b10000000
86: inst = 9'b001_111_001; //r7 = 0b10000000
87: inst = 9'b000_110_100; //r6 = 0b10000000 & LSW
88: inst = 9'b100_000000; //ASSUMED r5 IS GARGABE VALUE
89: inst = 9'b000_000_001;
90: inst = 9'b100_011000;
91: inst = 9'b001_000_001;
92: inst = 9'b0110_000_01;
93: inst = 9'b100_000010;
94: inst = 9'b001_001_000;
95: inst = 9'b111_110_111;
96: inst = 9'b100_000001;
97: inst = 9'b001_011_001;
98: inst = 9'b0110_110_11; //clear r6
99: inst = 9'b0110_111_11; //clear r7
100: inst = 9'b0110_100_00;
101: inst = 9'b100_111111;
102: inst = 9'b0110_001_01;
103: inst = 9'b001_010_001;
104: inst = 9'b100_000011;
105: inst = 9'b001_010_001; //Decrement E
106: inst = 9'b100_011001;
107: inst = 9'b001_110_001;
108: inst = 9'b100_111111;
109: inst = 9'b001_111_001;
110: inst = 9'b100_010000;
111: inst = 9'b001_001_111;
112: inst = 9'b111_010_110;
113: inst = 9'b100_000000;
114: inst = 9'b000_110_001; //clear r6
115: inst = 9'b000_111_001; //clear r7
116: inst = 9'b100_011001;
117: inst = 9'b001_110_001;
118: inst = 9'b100_000000;
119: inst = 9'b000_000_001;
120: inst = 9'b100_100000;
121: inst = 9'b001_000_001;
122: inst = 9'b0110_000_01;
123: inst = 9'b100_000001;
124: inst = 9'b001_001_000;
125: inst = 9'b111_010_110;
126: inst = 9'b100_000000;
127: inst = 9'b101_001_001;
128: inst = 9'b111_110_111;
129: inst = 9'b100_000000;
130: inst = 9'b000_110_001;
131: inst = 9'b000_111_001;
132: inst = 9'b100_000010;
133: inst = 9'b001_110_001;
134: inst = 9'b001_110_010; //E + 2
135: inst = 9'b0111_110_11; //r6 == 1 if E > 13
136: inst = 9'b100_000001;
137: inst = 9'b001_111_001;
138: inst = 9'b100_000000;
139: inst = 9'b000_000_001;
140: inst = 9'b100_110101;
141: inst = 9'b001_000_001;
142: inst = 9'b0110_000_01;
143: inst = 9'b100_000000;
144: inst = 9'b001_001_000;
145: inst = 9'b111_110_111;
146: inst = 9'b0111_110_11; //clear r6
147: inst = 9'b0111_111_11; //clear r7
148: inst = 9'b100_000011;
149: inst = 9'b110_101_001; //store [3] = r5 = signbit, need free regs
150: inst = 9'b0110_001_00;
151: inst = 9'b110_010_001; //store [6] = r2 = E.	r0,r2,r5,r6,r7 free
152: inst = 9'b100_000000;
153: inst = 9'b000_000_001;
154: inst = 9'b000_010_001; //R = 0
155: inst = 9'b000_101_001; //S = 0
156: inst = 9'b100_000000;
157: inst = 9'b000_110_001; //clear r6
158: inst = 9'b000_111_001; //clear r7
159: inst = 9'b100_000001;
160: inst = 9'b001_111_001; //r6 = 1
161: inst = 9'b001_110_001; //r7 = 1
162: inst = 9'b000_001_100; //old G = LSW & 1
163: inst = 9'b001_000_001; //shift out in r0
164: inst = 9'b0111_100_00; //shift LSW right 1
165: inst = 9'b100_000001;
166: inst = 9'b010_101_001;
167: inst = 9'b010_001_010;
168: inst = 9'b000_101_001;
169: inst = 9'b100_000001;
170: inst = 9'b010_101_001;
171: inst = 9'b0111_010_11;
172: inst = 9'b001_010_000; //R = old G
173: inst = 9'b000_110_011; //MSW & 1
174: inst = 9'b100_000000;
175: inst = 9'b000_000_001;
176: inst = 9'b100_101110;
177: inst = 9'b001_000_001;
178: inst = 9'b0110_000_01;
179: inst = 9'b100_000001;
180: inst = 9'b001_001_000;
181: inst = 9'b111_110_111; //save right shift out from MSW
182: inst = 9'b100_100000;
183: inst = 9'b0110_001_01; //r1 = 0b10000000
184: inst = 9'b001_100_001;
185: inst = 9'b0111_011_00; //shift MSW right 1
186: inst = 9'b100_000110; //[6] holds E
187: inst = 9'b101_111_001; //r7 = E
188: inst = 9'b100_011001;
189: inst = 9'b0111_110_11; //clear r6
190: inst = 9'b001_110_001; //r6 = 25
191: inst = 9'b100_000001;
192: inst = 9'b001_111_001;
193: inst = 9'b100_000110;
194: inst = 9'b110_111_001;
195: inst = 9'b100_000000;
196: inst = 9'b000_000_001;
197: inst = 9'b100_100111;
198: inst = 9'b001_000_001;
199: inst = 9'b0110_000_01;
200: inst = 9'b100_000000;
201: inst = 9'b001_001_000;
202: inst = 9'b111_110_111;
203: inst = 9'b0111_110_11;
204: inst = 9'b100_000000;
205: inst = 9'b000_000_001;
206: inst = 9'b100_110111;
207: inst = 9'b001_000_001;
208: inst = 9'b0110_000_01;
209: inst = 9'b100_000000;
210: inst = 9'b001_001_000;
211: inst = 9'b111_110_111;
212: inst = 9'b100_000000;
213: inst = 9'b000_011_001;
214: inst = 9'b000_100_001;
215: inst = 9'b100_000001;
216: inst = 9'b001_110_001;
217: inst = 9'b100_000000;
218: inst = 9'b101_001_001;
219: inst = 9'b111_011_110;
220: inst = 9'b100_000000;
221: inst = 9'b000_110_001;
222: inst = 9'b000_111_001;
223: inst = 9'b100_000001;
224: inst = 9'b001_110_001;
225: inst = 9'b001_111_001;
226: inst = 9'b000_110_100; //r6 = G
227: inst = 9'b000_110_010; //r6  = G & R
228: inst = 9'b000_111_101; //r7 = S
229: inst = 9'b000_010_101; //r2 = R & S
230: inst = 9'b010_110_001; // ~r6
231: inst = 9'b010_010_001; // ~r7
232: inst = 9'b000_110_010; // (~r6 & ~r7)
233: inst = 9'b010_110_001; //	r6 | r7
234: inst = 9'b0111_111_11;
235: inst = 9'b001_111_001;
236: inst = 9'b100_000000;
237: inst = 9'b101_001_001;
238: inst = 9'b111_110_111;
239: inst = 9'b001_100_110;
240: inst = 9'b0111_110_11; //clear r6
241: inst = 9'b100_000000;
242: inst = 9'b101_001_001; //load done label
243: inst = 9'b111_110_100;
244: inst = 9'b100_000001;
245: inst = 9'b001_011_001;
246: inst = 9'b100_000000; //done
247: inst = 9'b000_111_001;
248: inst = 9'b100_000011;
249: inst = 9'b101_110_001; // r6 = sign bit
250: inst = 9'b001_110_011; // S + MSW
251: inst = 9'b100_010001;
252: inst = 9'b001_111_001;
253: inst = 9'b0110_111_10;
254: inst = 9'b110_110_111;
255: inst = 9'b100_000001;
256: inst = 9'b001_111_001;
257: inst = 9'b110_100_111;
