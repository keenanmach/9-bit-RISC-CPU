import definitions::*;
module ctrl_dec_tb();

logic [2:0] op;
logic str;
logic ldr; 
logic rf_we;

ctrl_dec ctrl_dec_test(op, str, ldr, rf_we);

initial begin
	// Test ADD
	#10ns
	op = kADD;
	$display("str is %b should be 0, ldr is %b should be 0, rf_we is %b should be 1, str", str, ldr, rf_we);
	#10ns
	
	// Test AND
	#10ns
	op = kAND;
	$display("str is %b should be 0, ldr is %b should be 0, rf_we is %b should be 1, str", str, ldr, rf_we);
	#10ns
	
	// Test XOR
	#10ns
	op = kXOR;
	$display("str is %b should be 0, ldr is %b should be 0, rf_we is %b should be 1, str", str, ldr, rf_we);
	#10ns
	
	// Test LSH
	#10ns
	op = kLSH;
	$display("str is %b should be 0, ldr is %b should be 0, rf_we is %b should be 1, str", str, ldr, rf_we);
	#10ns
	
	// Test STR
	#10ns
	op = kSTR;
	$display("str is %b should be 1, ldr is %b should be 0, rf_we is %b should be 0, str", str, ldr, rf_we);
	#10ns
	
	// Test LDI
	#10ns
	op = kLDI;
	$display("str is %b should be 0, ldr is %b should be 1, rf_we is %b should be 1, str", str, ldr, rf_we);
	#10ns
	
	// Test BNE
	#10ns
	op = kBNE;
	$display("str is %b should be 0, ldr is %b should be 0, rf_we is %b should be 0, str", str, ldr, rf_we);
	#10ns
end
endmodule

initial begin

	// Test ADD
    #10ns
	 op = kADD;
	 ci = 0;
    in_a = 8'd23;
	 in_b = 8'd22;
    #10ns
    $display("result is %d, should be 45", rslt);
	 
	 
	 // Test ADD
    #10ns
 	 op = kADD;
	 ci = 0;
    in_a = 8'd5;
	 in_b = -8'd2;
    #10ns
    $display("result is %d, should be 3", rslt);

	 
	 // Test ADD
    #10ns
	 op = kADD;
	 ci = 0;
    in_a = 8'd255;
	 in_b = 8'd4;
    #10ns
    $display("result is %d, should be 3", rslt);
	 
	
	// Test AND
	#10ns
    op = kAND;
    in_a = 8'd255;
	 in_b = 8'd0;
    #10ns
    $display("result is %b, should be 0", rslt);
	 
    // Test AND
	#10ns
    op = kAND;
    in_a = 8'b01010101;
	 in_b = 8'b10101010;
    #10ns
    $display("result is %b, should be 0b00000000", rslt);

	// Test AND
	#10ns
    op = kAND;
    in_a = 8'b01010101;
	 in_b = 8'b01010101;
    #10ns
    $display("result is %b, should be 0b01010101", rslt);
	 
	// Test XOR
	#10ns
    op = kXOR;
    in_a = 8'b01010101;
	 in_b = 8'b01010101;
    #10ns
    $display("result is %b, should be 0b00000000", rslt);
	 
	 
	 // Test XOR
	#10ns
    op = kXOR;
    in_a = 8'b01010101;
	 in_b = 8'b00000000;
    #10ns
    $display("result is %b, should be 0b01010101", rslt);


	 // Test LSH
	#10ns
	 rsh = 0;
    op = kLSH;
    in_a = 8'd16;
	 in_b = 8'd2;
	 
    #10ns
    $display("result is %d, should be 64", rslt);


	 // Test LSH
	#10ns
	 rsh = 1;
    op = kLSH;
    in_a = 8'd16;
	 in_b = 8'd2;
	 
    #10ns
    $display("result is %d, should be 4", rslt);
	 
	 
	// Test STR
	#10ns
    op = kSTR;
    in_a = 8'd16;
	 in_b = 8'd2;
	 
    #10ns
    $display("result is %d, should be 16", rslt);
	 
	 
	 
	 // Test LDI
	#10ns
    op = kLDI;
    in_a = 8'd16;
	 in_b = 8'd63;
	 
    #10ns
    $display("result is %d, should be 63", rslt);
	
	// Test BNE
	#10ns
	op = kBNE;
	in_a = 8'd56;
	in_b = 8'd56;
	#10ns
	$display("z is %b, should be 1", z);

	// Test BNE
	#10ns
   op = kBNE;
	in_a = 8'd58;
	in_b = 8'd56;
	#10ns
	$display("z is %b, should be 0", z);
	
	

	$stop;

end
endmodule // alu_tb
