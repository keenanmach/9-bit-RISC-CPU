0: inst = 9'b100_111110;
1: inst = 9'b101_100_001; // r4 = [62]  = lfsr_pattern
2: inst = 9'b100_111111;
3: inst = 9'b101_101_001; // r5 = [63] = lfsr_state = x
4: inst = 9'b100_000000; // r6 = curr_mem = 0
5: inst = 9'b000_110_001;
6: inst = 9'b100_000000;
7: inst = 9'b000_111_001;
8: inst = 9'b100_100000;
9: inst = 9'b001_111_001;
10: inst = 9'b010_111_101; // r7 = space ^ x
11: inst = 9'b100_000000;
12: inst = 9'b000_000_001;
13: inst = 9'b001_000_110;
14: inst = 9'b100_111111; // r0 = curr_mem + 64
15: inst = 9'b001_000_001;
16: inst = 9'b100_000001;
17: inst = 9'b001_000_001;
18: inst = 9'b110_111_000; // [r0] = space ^ x
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
19: inst = 9'b100_000000; // r0 = parity = 0000 0000
20: inst = 9'b000_000_001;
21: inst = 9'b100_000001; // lr = 0000 0001
22: inst = 9'b000_001_100; // lr = lfsr & 0000 0001
23: inst = 9'b000_001_101; // lr = lfsr & 0000 0001 & x
24: inst = 9'b010_000_001; // r0 = parity ^ (lfsr & 0000 0001 & x)
25: inst = 9'b100_000010; // lr = 0000 0010
26: inst = 9'b000_001_101; // lr = 0000 0010 & x
27: inst = 9'b000_001_100; // lr = 0000 0010 & x & lfsr
28: inst = 9'b0111_001_00; // lr = (0000 0010 & x & lfsr) >> 1
29: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
30: inst = 9'b100_000100; // lr = 0000 0100
31: inst = 9'b000_001_101; // lr = 0000 0100 & x
32: inst = 9'b000_001_100; // lr = 0000 0100 & x & lfsr
33: inst = 9'b0111_001_01; // lr = (0000 0100 & x & lfsr) >> 2
34: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
35: inst = 9'b100_001000; // lr = 0000 100
36: inst = 9'b000_001_101; // lr = 0000 1000 & x
37: inst = 9'b000_001_100; // lr = 0000 1000 & x & lfsr
38: inst = 9'b0111_001_10; // lr = (0000 1000 & x & lfsr) >> 3
39: inst = 9'b010_000_001; // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
40: inst = 9'b100_010000; // lr = 0001 0000
41: inst = 9'b000_001_101; // lr = 0001 0000 & x
42: inst = 9'b000_001_100; // lr = 0001 0000 & x & lfsr
43: inst = 9'b0111_001_11; // lr = (0001 0000 & x & lfsr) >> 4
44: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
45: inst = 9'b100_100000; // lr = 0010 0000
46: inst = 9'b000_001_101; // lr = 0010 0000 & x
47: inst = 9'b000_001_100; // lr = 0010 0000 & x & lfsr
48: inst = 9'b0111_001_11; // lr = (0010 0000 & x & lfsr) >> 5
49: inst = 9'b0111_001_00;
50: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
51: inst = 9'b100_100000; // lr = 0010 0000
52: inst = 9'b0110_001_00; // lr = 0100 0000
53: inst = 9'b000_001_101; // lr = 0100 0000 & x
54: inst = 9'b000_001_100; // lr = 0100 0000 & x & lfsr
55: inst = 9'b0111_001_11; // lr = (0100 0000 & x & lfsr) >> 6
56: inst = 9'b0111_001_01;
57: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
58: inst = 9'b100_100000; // lr = 0010 0000
59: inst = 9'b0110_001_01; // lr = 1000 0000
60: inst = 9'b000_001_101; // lr = 1000 0000 & x
61: inst = 9'b000_001_100; // lr = 1000 0000 & x & lfsr
62: inst = 9'b0111_001_11; // lr = (1000 0000 & x & lfsr) >> 7
63: inst = 9'b0111_001_10;
64: inst = 9'b010_000_001; // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
65: inst = 9'b0110_101_00; // r5 = x << 1
66: inst = 9'b001_101_000; // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
67: inst = 9'b100_000001; // curr_mem = curr_mem + 1
68: inst = 9'b001_110_001;
69: inst = 9'b100_000000;
70: inst = 9'b000_011_001;
71: inst = 9'b100_111101;
72: inst = 9'b001_011_001;
73: inst = 9'b101_011_011; // r3 = [61] = num_spaces
74: inst = 9'b100_000000; // lr = prepend_spaces
75: inst = 9'b000_010_001;
76: inst = 9'b100_000001;
77: inst = 9'b001_010_001;
78: inst = 9'b0110_010_01;
79: inst = 9'b100_000010;
80: inst = 9'b001_001_010;
81: inst = 9'b111_110_011; // while(curr_mem < num_spaces) prepend_spaces
82: inst = 9'b100_000000; // r6 = curr_mem = 0(start reading from 0)
83: inst = 9'b000_110_001;
84: inst = 9'b101_111_110; // r7 = [curr_mem] = char
85: inst = 9'b010_111_101; // r7 = char ^ x
86: inst = 9'b100_000000; // r2 = curr_mem
87: inst = 9'b000_010_001;
88: inst = 9'b001_010_110;
89: inst = 9'b001_010_011; // r2 = curr_mem + num_spaces
90: inst = 9'b100_111111; // r2 = curr_mem num_spaces + 64
91: inst = 9'b001_010_001;
92: inst = 9'b100_000001;
93: inst = 9'b001_010_001;
94: inst = 9'b110_111_010; // [curr_mem + num_spaces + 64] = char ^ x
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
95: inst = 9'b100_000000; // r0 = parity = 0000 0000
96: inst = 9'b000_000_001;
97: inst = 9'b100_000001; // lr = 0000 0001
98: inst = 9'b000_001_100; // lr = lfsr & 0000 0001
99: inst = 9'b000_001_101; // lr = lfsr & 0000 0001 & x
100: inst = 9'b010_000_001; // r0 = parity ^ (lfsr & 0000 0001 & x)
101: inst = 9'b100_000010; // lr = 0000 0010
102: inst = 9'b000_001_101; // lr = 0000 0010 & x
103: inst = 9'b000_001_100; // lr = 0000 0010 & x & lfsr
104: inst = 9'b0111_001_00; // lr = (0000 0010 & x & lfsr) >> 1
105: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
106: inst = 9'b100_000100; // lr = 0000 0100
107: inst = 9'b000_001_101; // lr = 0000 0100 & x
108: inst = 9'b000_001_100; // lr = 0000 0100 & x & lfsr
109: inst = 9'b0111_001_01; // lr = (0000 0100 & x & lfsr) >> 2
110: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
111: inst = 9'b100_001000; // lr = 0000 100
112: inst = 9'b000_001_101; // lr = 0000 1000 & x
113: inst = 9'b000_001_100; // lr = 0000 1000 & x & lfsr
114: inst = 9'b0111_001_10; // lr = (0000 1000 & x & lfsr) >> 3
115: inst = 9'b010_000_001; // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
116: inst = 9'b100_010000; // lr = 0001 0000
117: inst = 9'b000_001_101; // lr = 0001 0000 & x
118: inst = 9'b000_001_100; // lr = 0001 0000 & x & lfsr
119: inst = 9'b0111_001_11; // lr = (0001 0000 & x & lfsr) >> 4
120: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
121: inst = 9'b100_100000; // lr = 0010 0000
122: inst = 9'b000_001_101; // lr = 0010 0000 & x
123: inst = 9'b000_001_100; // lr = 0010 0000 & x & lfsr
124: inst = 9'b0111_001_11; // lr = (0010 0000 & x & lfsr) >> 5
125: inst = 9'b0111_001_00;
126: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
127: inst = 9'b100_100000; // lr = 0010 0000
128: inst = 9'b0110_001_00; // lr = 0100 0000
129: inst = 9'b000_001_101; // lr = 0100 0000 & x
130: inst = 9'b000_001_100; // lr = 0100 0000 & x & lfsr
131: inst = 9'b0111_001_11; // lr = (0100 0000 & x & lfsr) >> 6
132: inst = 9'b0111_001_01;
133: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
134: inst = 9'b100_100000; // lr = 0010 0000
135: inst = 9'b0110_001_01; // lr = 1000 0000
136: inst = 9'b000_001_101; // lr = 1000 0000 & x
137: inst = 9'b000_001_100; // lr = 1000 0000 & x & lfsr
138: inst = 9'b0111_001_11; // lr = (1000 0000 & x & lfsr) >> 7
139: inst = 9'b0111_001_10;
140: inst = 9'b010_000_001; // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
141: inst = 9'b0110_101_00; // r5 = x << 1
142: inst = 9'b001_101_000; // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
143: inst = 9'b100_000001; // curr_mem = curr_mem + 1
144: inst = 9'b001_110_001;
145: inst = 9'b100_000000; // r7 = 64
146: inst = 9'b000_111_001;
147: inst = 9'b100_111111;
148: inst = 9'b001_111_001;
149: inst = 9'b100_000001;
150: inst = 9'b001_111_001;
151: inst = 9'b100_000000; // lr = encrypt_char
152: inst = 9'b000_010_001;
153: inst = 9'b100_010101;
154: inst = 9'b001_010_001;
155: inst = 9'b0110_010_01;
156: inst = 9'b100_000000;
157: inst = 9'b001_001_010;
158: inst = 9'b111_110_111; // while(curr_mem < 40) encrypt_char
159: inst = 9'b111_111_111; // halt
