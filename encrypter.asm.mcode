100_111110
101_100_001 // r4 = [62]  = lfsr_pattern
100_111111
101_101_001 // r5 = [63] = lfsr_state = x
100_000000 // r6 = curr_mem = 0
000_110_001
100_000000
000_111_001
100_100000
001_111_001
010_111_100 // r7 = space ^ x
100_000000
000_000_001
001_000_110
100_111111 // r0 = curr_mem + 64
001_000_001
001_000_001
100_000001
001_000_001
110_111_000 // [r0] = space ^ x
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
100_000000 // r0 = parity = 0000 0001
000_000_001
100_000001
001_000_001
100_000001 // lr = 0000 0001
000_001_100 // lr = lfsr & 0000 0001
000_001_101 // lr = lfsr & 0000 0001 & x
010_000_001 // r0 = parity ^ (lfsr & 0000 0001 & x)
100_000010 // lr = 0000 0010
000_001_101 // lr = 0000 0010 & x
000_001_100 // lr = 0000 0010 & x & lfsr
0111_001_00 // lr = (0000 0010 & x & lfsr) >> 1
010_000_001 // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
100_000100 // lr = 0000 0100
000_001_101 // lr = 0000 0100 & x
000_001_100 // lr = 0000 0100 & x & lfsr
0111_001_01 // lr = (0000 0100 & x & lfsr) >> 2
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
100_001000 // lr = 0000 100
000_001_101 // lr = 0000 1000 & x
000_001_100 // lr = 0000 1000 & x & lfsr
0111_001_10 // lr = (0000 1000 & x & lfsr) >> 3
010_000_001 // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
100_010000 // lr = 0001 0000
000_001_101 // lr = 0001 0000 & x
000_001_100 // lr = 0001 0000 & x & lfsr
0111_001_11 // lr = (0001 0000 & x & lfsr) >> 4
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
100_100000 // lr = 0010 0000
000_001_101 // lr = 0010 0000 & x
000_001_100 // lr = 0010 0000 & x & lfsr
0111_001_100 // lr = (0010 0000 & x & lfsr) >> 5
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
100_100000 // lr = 0010 0000
0110_001_00 // lr = 0100 0000
000_001_101 // lr = 0100 0000 & x
000_001_100 // lr = 0100 0000 & x & lfsr
0111_001_100 // lr = (0100 0000 & x & lfsr) >> 6
0111_001_00
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
100_100000 // lr = 0010 0000
0110_001_01 // lr = 1000 0000
000_001_101 // lr = 1000 0000 & x
000_001_100 // lr = 1000 0000 & x & lfsr
0111_001_100 // lr = (1000 0000 & x & lfsr) >> 7
0111_001_01
010_000_001 // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
0110_101_00 // r5 = x << 1
001_101_000 // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
100_000001 // curr_mem = curr_mem + 1
001_110_001
100_000000
000_011_001
100_111101
001_011_001
101_011_011 // r3 = [61] = num_spaces
100_000000 // lr = prepend_spaces
000_010_001
100_000001
001_010_001
0110_010_01
100_000010
001_001_010
111_110_011 // while(curr_mem < num_spaces) prepend_spaces
101_111_110 // r7 = [curr_mem] = char
010_111_101 // r7 = char ^ x
100_000000 // r2 = curr_mem
000_010_001
001_010_110
100_111111 // r2 = curr_mem + 64
001_010_001
001_010_001
100_000001
001_010_001
110_111_010 // [curr_mem + 64] = char ^ x
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
100_000000 // r0 = parity = 0000 0001
000_000_001
100_000001
001_000_001
100_000001 // lr = 0000 0001
000_001_100 // lr = lfsr & 0000 0001
000_001_101 // lr = lfsr & 0000 0001 & x
010_000_001 // r0 = parity ^ (lfsr & 0000 0001 & x)
100_000010 // lr = 0000 0010
000_001_101 // lr = 0000 0010 & x
000_001_100 // lr = 0000 0010 & x & lfsr
0111_001_00 // lr = (0000 0010 & x & lfsr) >> 1
010_000_001 // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
100_000100 // lr = 0000 0100
000_001_101 // lr = 0000 0100 & x
000_001_100 // lr = 0000 0100 & x & lfsr
0111_001_01 // lr = (0000 0100 & x & lfsr) >> 2
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
100_001000 // lr = 0000 100
000_001_101 // lr = 0000 1000 & x
000_001_100 // lr = 0000 1000 & x & lfsr
0111_001_10 // lr = (0000 1000 & x & lfsr) >> 3
010_000_001 // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
100_010000 // lr = 0001 0000
000_001_101 // lr = 0001 0000 & x
000_001_100 // lr = 0001 0000 & x & lfsr
0111_001_11 // lr = (0001 0000 & x & lfsr) >> 4
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
100_100000 // lr = 0010 0000
000_001_101 // lr = 0010 0000 & x
000_001_100 // lr = 0010 0000 & x & lfsr
0111_001_100 // lr = (0010 0000 & x & lfsr) >> 5
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
100_100000 // lr = 0010 0000
0110_001_00 // lr = 0100 0000
000_001_101 // lr = 0100 0000 & x
000_001_100 // lr = 0100 0000 & x & lfsr
0111_001_100 // lr = (0100 0000 & x & lfsr) >> 6
0111_001_00
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
100_100000 // lr = 0010 0000
0110_001_01 // lr = 1000 0000
000_001_101 // lr = 1000 0000 & x
000_001_100 // lr = 1000 0000 & x & lfsr
0111_001_100 // lr = (1000 0000 & x & lfsr) >> 7
0111_001_01
010_000_001 // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
0110_101_00 // r5 = x << 1
001_101_000 // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
100_000001 // curr_mem = curr_mem + 1
001_110_001
100_000000 // r7 = 64
000_111_001
100_111111
001_111_001
001_111_001
100_000001
001_111_001
100_000000 // lr = encrypt_char
000_010_001
100_010101
001_010_001
0110_010_01
100_000010
001_001_010
111_110_111 // while(curr_mem < 64) encrypt_char
111_111_111 // halt
