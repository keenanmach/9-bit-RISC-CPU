0: instr = 9'b100_000000; //ldi 0
1: instr = 9'b000_011_001; //and r3, r1	r3 = 0
2: instr = 9'b100_100000; //ldi 0b100000
3: instr = 9'b001_011_001; //add r3, r1	r3 = 32
4: instr = 9'b0110_011_01; //lsl r3, 2	r3 = 128
5: instr = 9'b101_000_011; //ldm r0, r3	r0 = MSW
6: instr = 9'b100_000001; //ldi 1
7: instr = 9'b001_011_001; //add r3, r1	r3 = 129
8: instr = 9'b101_010_011; //ldm r2, r3	r2 = LSW
9: instr = 9'b100_000000; //ldi 0
10: instr = 9'b000_011_001; //and r3, r1	r3 = 0
11: instr = 9'b100_011101; //ldi 29
12: instr = 9'b001_011_001; //add r3, r1	r3 = 29
13: instr = 9'b100_000000; //ldi 0
14: instr = 9'b000_100_001; //and r4, r1	r4 = 0
15: instr = 9'b100_100000; //ldi 0b100000
16: instr = 9'b0110_001_01; //lsl r1, 2	r1 = 0b10000000
17: instr = 9'b001_100_001; //add r4, r1	r4 = 0b10000000
18: instr = 9'b000_100_000; //and r4, r0	r4 = 0b10000000 & MSW = signbit
19: instr = 9'b100_000000; //ldi 0
20: instr = 9'b000_101_001; //and r5, r1	r5 = 0
21: instr = 9'b100_100000; //ldi 0b100000
22: instr = 9'b0110_001_00; //lsl r1, 1	r1 = 0b1000000
23: instr = 9'b001_101_001; //add r5, r1	r5 = 0b1000000 = mask
24: instr = 9'b100_000000; //ldi 0
25: instr = 9'b000_110_001; //and r6, r1	r6 = 0
26: instr = 9'b001_110_000; //add r6, r0	r6 = MSW
27: instr = 9'b000_110_101; //and r6, r5	r6 = mask & MSW
28: instr = 9'b100_000000; //ldi 0
29: instr = 9'b000_111_001; //and r7, r1	r7 = 0
30: instr = 9'b100_000000; //ldr r5, if3 ASSUMED r5 IS GARBAGE VALUE
31: instr = 9'b000_101_001;
32: instr = 9'b100_010000;
33: instr = 9'b001_101_001;
34: instr = 9'b0110_101_01;
35: instr = 9'b100_000010;
36: instr = 9'b001_001_101;
37: instr = 9'b111_110_111; //bne	r6, r7
38: instr = 9'b0110_000_00; //lsl r0, 1
39: instr = 9'b100_000000; //ldi 0
40: instr = 9'b000_110_001; //and r6, r1	r6 = 0
41: instr = 9'b100_100000; //ldi 0b100000
42: instr = 9'b0110_001_01; //lsl r1, 2	r1 = 0b10000000
43: instr = 9'b001_110_001; //add r6, r1	r6 = 0b10000000
44: instr = 9'b000_110_010; //and r6, r2	r6 = 0b10000000 & LSW
45: instr = 9'b100_000000; //ldi 0
46: instr = 9'b000_111_001; //and r7, r1	r7 = 0
47: instr = 9'b100_100000; //ldi 0b100000
48: instr = 9'b0110_001_01; //lsl r1, 2
49: instr = 9'b001_111_001; //add r7, r1
50: instr = 9'b100_000000; //ldr r5, if2 ASSUMED r5 IS GARGABE VALUE
51: instr = 9'b000_101_001;
52: instr = 9'b100_001111;
53: instr = 9'b001_101_001;
54: instr = 9'b0110_101_01;
55: instr = 9'b100_000000;
56: instr = 9'b001_001_101;
57: instr = 9'b111_110_111; //bne r6, r7
58: instr = 9'b100_000001; //ldi 1
59: instr = 9'b001_000_001; //add r0, r1
60: instr = 9'b0110_010_00; //lsl r2, 1
61: instr = 9'b100_111111; //ldi 0b111111
62: instr = 9'b0110_001_01; //lsl r1, 2
63: instr = 9'b001_011_001; //add r3, r1
64: instr = 9'b100_000011; //ldi 0b11
65: instr = 9'b001_011_001; //add r3, r1	Decrement E
66: instr = 9'b100_000000; //ldi 0
67: instr = 9'b000_101_001; //and r5, r1	r5 = 0
68: instr = 9'b100_100000; //ldi 0b100000
69: instr = 9'b0110_001_00; //lsl r1, 1	r1 = 0b1000000
70: instr = 9'b001_101_001; //add r5, r1	r5 = 0b1000000 = mask
71: instr = 9'b100_000000; //ldi 0
72: instr = 9'b000_110_001; //and r6, r1	r6 = 0
73: instr = 9'b001_110_000; //add r6, r0	r6 = MSW
74: instr = 9'b000_110_101; //and r6, r5	r6 = mask & MSW
75: instr = 9'b100_000000; //ldr r7, loop	ASSUMED r7 IS GARBAGE VALUE loop again if mask & MSW != 0
76: instr = 9'b000_111_001;
77: instr = 9'b100_000100;
78: instr = 9'b001_111_001;
79: instr = 9'b0110_111_01;
80: instr = 9'b100_000011;
81: instr = 9'b001_001_111;
82: instr = 9'b111_110_101; //bne r6, r5	r6 = mask & MSW & mask
83: instr = 9'b100_000000; //ldi 0
84: instr = 9'b000_110_001; //and r6, r1
85: instr = 9'b100_010000; //ldi 0b10000
86: instr = 9'b001_110_001; //add r6, r1	 r6 = 0b10000
87: instr = 9'b000_110_010; //and r6, r2	 r6 = 0b10000 & LSW
88: instr = 9'b100_000000; //ldi 0
89: instr = 9'b000_111_001; //and r7, r1
90: instr = 9'b100_001000; //ldi 0b1000
91: instr = 9'b001_111_001; //add r7, r1	 r7 = 0b1000
92: instr = 9'b000_111_010; //and r7, r2	 r7 = 0b1000 & LSW
93: instr = 9'b001_110_111; //add r6, r7	 r7 = (0b10000 & LSW) & (0b1000 & LSW)
94: instr = 9'b100_000000; //ldi 0
95: instr = 9'b000_111_001; //and r7, r1
96: instr = 9'b100_000000; //ldr r5, if5 ASSUMED r5 IS GARBAGE VALUE
97: instr = 9'b000_101_001;
98: instr = 9'b100_011111;
99: instr = 9'b001_101_001;
100: instr = 9'b0110_101_01;
101: instr = 9'b100_000011;
102: instr = 9'b001_001_101;
103: instr = 9'b111_110_111; //bne r6, r7
104: instr = 9'b100_000000; //ldi 0
105: instr = 9'b000_110_001; //and r6, r1
106: instr = 9'b100_011111; //ldi 0b11111
107: instr = 9'b001_110_001; //add r6, r1
108: instr = 9'b0110_110_10; //lsl r6, 3	r6 = 0b11111000
109: instr = 9'b000_110_010; //and r6, r2	r6 = 0b11111000 & LSW
110: instr = 9'b100_000000; //ldi 0
111: instr = 9'b000_111_001; //and r7, r1
112: instr = 9'b100_011111; //ldi 0b11111
113: instr = 9'b001_111_001; //add r7, r1
114: instr = 9'b0110_111_10; //lsl r7, 3	r7 = 0b11111000
115: instr = 9'b100_000000; //ldr r5, if4 ASSUMED r5 IS GARBAGE VALUE
116: instr = 9'b000_101_001;
117: instr = 9'b100_011111;
118: instr = 9'b001_101_001;
119: instr = 9'b0110_101_01;
120: instr = 9'b100_000001;
121: instr = 9'b001_001_101;
122: instr = 9'b111_110_111; //bne r6, r7
123: instr = 9'b100_000001; //ldi 1
124: instr = 9'b001_000_001; //add r0, r1
125: instr = 9'b100_001000; //ldi 8
126: instr = 9'b001_010_001; //add r2, r1
127: instr = 9'b100_000000; //ldi 0
128: instr = 9'b000_110_001; //and r6, r1
129: instr = 9'b100_010000; //ldi 0b10000
130: instr = 9'b001_110_001; //add r6, r1	 r6 = 0b10000
131: instr = 9'b000_110_010; //and r6, r2	 r6 = 0b10000 & LSW
132: instr = 9'b100_000000; //ldi 0
133: instr = 9'b000_111_001; //and r7, r1
134: instr = 9'b100_010000; //ldi 0b10000
135: instr = 9'b001_111_001; //add r7, r1	 r6 = 0b10000
136: instr = 9'b010_110_111; //xor r6, r7
137: instr = 9'b100_000000; //ldi 0
138: instr = 9'b000_111_001; //and r7, r1
139: instr = 9'b100_001000; //ldi 0b1000
140: instr = 9'b001_111_001; //add r7, r1	 r7 = 0b1000
141: instr = 9'b000_111_010; //and r7, r2	 r7 = 0b1000 & LSW
142: instr = 9'b001_110_111; //add r6, r7
143: instr = 9'b100_000000; //ldi 0
144: instr = 9'b000_111_001; //and r7, r1
145: instr = 9'b100_000111; //ldi 0b111
146: instr = 9'b001_111_001; //add r7, r1	 r7 = 0b111
147: instr = 9'b000_111_010; //and r7, r2	 r7 = 0b111 & LSW
148: instr = 9'b001_110_111; //add r6, r7
149: instr = 9'b100_000000; //ldi 0
150: instr = 9'b000_111_001; //and r7, r1
151: instr = 9'b100_000000; //ldr r5, if7 ASSUMED r5 IS GARBAGE VALUE
152: instr = 9'b000_101_001;
153: instr = 9'b100_101101;
154: instr = 9'b001_101_001;
155: instr = 9'b0110_101_01;
156: instr = 9'b100_000010;
157: instr = 9'b001_001_101;
158: instr = 9'b111_110_111; //bne r6, r7
159: instr = 9'b100_000000; //ldi 0
160: instr = 9'b000_110_001; //and r6, r1
161: instr = 9'b100_011111; //ldi 0b11111
162: instr = 9'b001_110_001; //add r6, r1
163: instr = 9'b0110_110_10; //lsl r6, 3	r6 = 0b11111000
164: instr = 9'b000_110_010; //and r6, r2	r6 = 0b11111000 & LSW
165: instr = 9'b100_000000; //ldi 0
166: instr = 9'b000_111_001; //and r7, r1
167: instr = 9'b100_011111; //ldi 0b11111
168: instr = 9'b001_111_001; //add r7, r1
169: instr = 9'b0110_111_10; //lsl r7, 3	r7 = 0b11111000
170: instr = 9'b100_000000; //ldr r5, if6 ASSUMED r5 IS GARBAGE VALUE
171: instr = 9'b000_101_001;
172: instr = 9'b100_101101;
173: instr = 9'b001_101_001;
174: instr = 9'b0110_101_01;
175: instr = 9'b100_000000;
176: instr = 9'b001_001_101;
177: instr = 9'b111_110_111; //bne r6, r7
178: instr = 9'b100_000001; //ldi 1
179: instr = 9'b001_000_001; //add r0, r1
180: instr = 9'b100_001000; //ldi 8
181: instr = 9'b001_010_001; //add r2, r1
182: instr = 9'b100_100000; //ldi 0b100000
183: instr = 9'b0110_001_01; //lsl r1, 2	r1 = 0b10000000
184: instr = 9'b001_110_001; //add r6, r1	r6 = 0b10000000
185: instr = 9'b000_110_000; //and r6, r0
186: instr = 9'b100_000000; //ldi 0
187: instr = 9'b000_111_001; //and r7, r1
188: instr = 9'b100_000000; //ldr r5, done ASSUMED r5 IS GARBAGE VALUE
189: instr = 9'b000_101_001;
190: instr = 9'b100_110111;
191: instr = 9'b001_101_001;
192: instr = 9'b0110_101_01;
193: instr = 9'b100_000000;
194: instr = 9'b001_001_101;
195: instr = 9'b111_110_111; //bne r6, r7
196: instr = 9'b0111_010_00; //lsr r2, 1 shift LSW right 1
197: instr = 9'b100_000000; //ldi 0
198: instr = 9'b000_110_001; //and r6, r1
199: instr = 9'b100_000001; //ldi 1
200: instr = 9'b001_110_001; //add r6, r1
201: instr = 9'b000_110_000; //and r6, r0
202: instr = 9'b100_000000; //ldi 0
203: instr = 9'b000_111_001; //and r7, r1
204: instr = 9'b100_000001; //ldi 1
205: instr = 9'b001_111_001; //add r7, r1
206: instr = 9'b100_000000; //ldr r5, if8
207: instr = 9'b000_101_001;
208: instr = 9'b100_110110;
209: instr = 9'b001_101_001;
210: instr = 9'b0110_101_01;
211: instr = 9'b100_000001;
212: instr = 9'b001_001_101;
213: instr = 9'b111_110_111; //bne r6, r7 	save right shift out from MSW
214: instr = 9'b100_100000; //ldi 0b100000
215: instr = 9'b0110_001_01; //lsl r1, 2	r1 = 0b10000000
216: instr = 9'b001_010_001; //add r2, r1
217: instr = 9'b0111_000_00; //lsr r0, 1
218: instr = 9'b100_000001; //ldi 1
219: instr = 9'b001_011_001; //add r3, r1	increment E
220: instr = 9'b0110_011_01; //lsl r3, 2
221: instr = 9'b001_100_011; //add r4, r3 {signbit,e,'b00}
222: instr = 9'b100_110000; //ldi 0b110000
223: instr = 9'b000_001_010; //and r1, r2
224: instr = 9'b0111_001_11; //lsr r1, 4
225: instr = 9'b001_100_001; //add r4, r1 r4 = {signbit,E,MSW[5:4]}
226: instr = 9'b0110_000_11; //lsl r0, 4
227: instr = 9'b0111_010_11; //lsr r2, 4
228: instr = 9'b001_000_010; //add r0, r2	r0 = {MSW[3:0],LSW[7:4]}
229: instr = 9'b100_000000; //ldi 0
230: instr = 9'b000_010_001; //and r2, r1
231: instr = 9'b100_100000; //ldi 0b100000
232: instr = 9'b0110_001_01; //lsl r1, 2
233: instr = 9'b001_010_001; //add r2, r1
234: instr = 9'b100_000011; //ldi 3
235: instr = 9'b001_010_001; //add r2, r1  r2 = 131
236: instr = 9'b110_100_010; //str r4, r2
237: instr = 9'b100_000001; //ldi 1
238: instr = 9'b001_010_001; //add r2, r1 r2 = 132
239: instr = 9'b110_000_010; //str r0, r2
240: instr = 9'b111_111_111; //bne r7, r7	"halt" instruction
