0: inst = 9'b100_000000; // r3 = idx = 54
1: inst = 9'b000_011_001;
2: inst = 9'b100_110110;
3: inst = 9'b001_011_001;
// loop to check each lfsr pattern
4: inst = 9'b100_000001; // idx = idx + 1 (starts at 55), check next lfsr state
5: inst = 9'b001_011_001;
6: inst = 9'b100_000000; // r6 = encrypted_char = 64
7: inst = 9'b000_110_001;
8: inst = 9'b100_111111;
9: inst = 9'b001_110_001;
10: inst = 9'b100_000001;
11: inst = 9'b001_110_001;
12: inst = 9'b101_100_011; // r4 = [idx] = lfsr
13: inst = 9'b101_101_110; // r5 = [encrypted_char] = state
14: inst = 9'b100_100000; // lr = space
15: inst = 9'b010_101_001; // r5 = state ^ space
16: inst = 9'b100_000001; // r6 = encrypted_char + 1
17: inst = 9'b001_110_001;
// loop to check the state nine times
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
18: inst = 9'b100_000000; // r0 = parity = 0000 0000
19: inst = 9'b000_000_001;
20: inst = 9'b100_000001; // lr = 0000 0001
21: inst = 9'b000_001_100; // lr = lfsr & 0000 0001
22: inst = 9'b000_001_101; // lr = lfsr & 0000 0001 & x
23: inst = 9'b010_000_001; // r0 = parity ^ (lfsr & 0000 0001 & x)
24: inst = 9'b100_000010; // lr = 0000 0010
25: inst = 9'b000_001_101; // lr = 0000 0010 & x
26: inst = 9'b000_001_100; // lr = 0000 0010 & x & lfsr
27: inst = 9'b0111_001_00; // lr = (0000 0010 & x & lfsr) >> 1
28: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
29: inst = 9'b100_000100; // lr = 0000 0100
30: inst = 9'b000_001_101; // lr = 0000 0100 & x
31: inst = 9'b000_001_100; // lr = 0000 0100 & x & lfsr
32: inst = 9'b0111_001_01; // lr = (0000 0100 & x & lfsr) >> 2
33: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
34: inst = 9'b100_001000; // lr = 0000 100
35: inst = 9'b000_001_101; // lr = 0000 1000 & x
36: inst = 9'b000_001_100; // lr = 0000 1000 & x & lfsr
37: inst = 9'b0111_001_10; // lr = (0000 1000 & x & lfsr) >> 3
38: inst = 9'b010_000_001; // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
39: inst = 9'b100_010000; // lr = 0001 0000
40: inst = 9'b000_001_101; // lr = 0001 0000 & x
41: inst = 9'b000_001_100; // lr = 0001 0000 & x & lfsr
42: inst = 9'b0111_001_11; // lr = (0001 0000 & x & lfsr) >> 4
43: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
44: inst = 9'b100_100000; // lr = 0010 0000
45: inst = 9'b000_001_101; // lr = 0010 0000 & x
46: inst = 9'b000_001_100; // lr = 0010 0000 & x & lfsr
47: inst = 9'b0111_001_11; // lr = (0010 0000 & x & lfsr) >> 5
48: inst = 9'b0111_001_00;
49: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
50: inst = 9'b100_100000; // lr = 0010 0000
51: inst = 9'b0110_001_00; // lr = 0100 0000
52: inst = 9'b000_001_101; // lr = 0100 0000 & x
53: inst = 9'b000_001_100; // lr = 0100 0000 & x & lfsr
54: inst = 9'b0111_001_11; // lr = (0100 0000 & x & lfsr) >> 6
55: inst = 9'b0111_001_01;
56: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
57: inst = 9'b100_100000; // lr = 0010 0000
58: inst = 9'b0110_001_01; // lr = 1000 0000
59: inst = 9'b000_001_101; // lr = 1000 0000 & x
60: inst = 9'b000_001_100; // lr = 1000 0000 & x & lfsr
61: inst = 9'b0111_001_11; // lr = (1000 0000 & x & lfsr) >> 7
62: inst = 9'b0111_001_10;
63: inst = 9'b010_000_001; // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
64: inst = 9'b0110_101_00; // r5 = x << 1
65: inst = 9'b001_101_000; // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
66: inst = 9'b101_111_110; // r7 = [encrypted_char] = mem_state
67: inst = 9'b100_100000; // lr = space
68: inst = 9'b010_111_001; // r7 = mem_state ^ space
69: inst = 9'b100_000000;
70: inst = 9'b000_010_001;
71: inst = 9'b100_000001;
72: inst = 9'b001_010_001;
73: inst = 9'b0110_010_01;
74: inst = 9'b100_000000;
75: inst = 9'b001_001_010;
76: inst = 9'b111_101_111; // if states are not the same check next lfsr state
// else continue
77: inst = 9'b100_000001; // r6 = encrypted_char + 1
78: inst = 9'b001_110_001;
79: inst = 9'b100_000000; // r0 = 73
80: inst = 9'b000_000_001;
81: inst = 9'b100_111111;
82: inst = 9'b001_000_001;
83: inst = 9'b100_001010;
84: inst = 9'b001_000_001;
85: inst = 9'b100_000000;
86: inst = 9'b000_010_001;
87: inst = 9'b100_000100;
88: inst = 9'b001_010_001;
89: inst = 9'b0110_010_01;
90: inst = 9'b100_000010;
91: inst = 9'b001_001_010;
92: inst = 9'b111_110_000; // while(encrypted_char < 73) check_spaces
// if reach here state found, r5=state, r4=lfsr
93: inst = 9'b100_000000; // idx = 0
94: inst = 9'b000_011_001;
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
95: inst = 9'b100_000000; // r0 = parity = 0000 0000
96: inst = 9'b000_000_001;
97: inst = 9'b100_000001; // lr = 0000 0001
98: inst = 9'b000_001_100; // lr = lfsr & 0000 0001
99: inst = 9'b000_001_101; // lr = lfsr & 0000 0001 & x
100: inst = 9'b010_000_001; // r0 = parity ^ (lfsr & 0000 0001 & x)
101: inst = 9'b100_000010; // lr = 0000 0010
102: inst = 9'b000_001_101; // lr = 0000 0010 & x
103: inst = 9'b000_001_100; // lr = 0000 0010 & x & lfsr
104: inst = 9'b0111_001_00; // lr = (0000 0010 & x & lfsr) >> 1
105: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
106: inst = 9'b100_000100; // lr = 0000 0100
107: inst = 9'b000_001_101; // lr = 0000 0100 & x
108: inst = 9'b000_001_100; // lr = 0000 0100 & x & lfsr
109: inst = 9'b0111_001_01; // lr = (0000 0100 & x & lfsr) >> 2
110: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
111: inst = 9'b100_001000; // lr = 0000 100
112: inst = 9'b000_001_101; // lr = 0000 1000 & x
113: inst = 9'b000_001_100; // lr = 0000 1000 & x & lfsr
114: inst = 9'b0111_001_10; // lr = (0000 1000 & x & lfsr) >> 3
115: inst = 9'b010_000_001; // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
116: inst = 9'b100_010000; // lr = 0001 0000
117: inst = 9'b000_001_101; // lr = 0001 0000 & x
118: inst = 9'b000_001_100; // lr = 0001 0000 & x & lfsr
119: inst = 9'b0111_001_11; // lr = (0001 0000 & x & lfsr) >> 4
120: inst = 9'b010_000_001; // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
121: inst = 9'b100_100000; // lr = 0010 0000
122: inst = 9'b000_001_101; // lr = 0010 0000 & x
123: inst = 9'b000_001_100; // lr = 0010 0000 & x & lfsr
124: inst = 9'b0111_001_11; // lr = (0010 0000 & x & lfsr) >> 5
125: inst = 9'b0111_001_00;
126: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
127: inst = 9'b100_100000; // lr = 0010 0000
128: inst = 9'b0110_001_00; // lr = 0100 0000
129: inst = 9'b000_001_101; // lr = 0100 0000 & x
130: inst = 9'b000_001_100; // lr = 0100 0000 & x & lfsr
131: inst = 9'b0111_001_11; // lr = (0100 0000 & x & lfsr) >> 6
132: inst = 9'b0111_001_01;
133: inst = 9'b010_000_001; // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
134: inst = 9'b100_100000; // lr = 0010 0000
135: inst = 9'b0110_001_01; // lr = 1000 0000
136: inst = 9'b000_001_101; // lr = 1000 0000 & x
137: inst = 9'b000_001_100; // lr = 1000 0000 & x & lfsr
138: inst = 9'b0111_001_11; // lr = (1000 0000 & x & lfsr) >> 7
139: inst = 9'b0111_001_10;
140: inst = 9'b010_000_001; // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
141: inst = 9'b0110_101_00; // r5 = x << 1
142: inst = 9'b001_101_000; // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
143: inst = 9'b101_111_110; // r7 = [encrypted_char]
144: inst = 9'b010_111_101; // r7 = [encrypted_char] ^ state
145: inst = 9'b110_111_011; // [idx] = [encrypted_char] ^ state = decrypted_char
146: inst = 9'b100_000001; // idx = idx + 1
147: inst = 9'b001_011_001;
148: inst = 9'b100_000001; // encrypted_char = encrypted_char + 1
149: inst = 9'b001_110_001;
150: inst = 9'b100_000000;
151: inst = 9'b000_111_001;
152: inst = 9'b100_111111;
153: inst = 9'b001_111_001;
154: inst = 9'b001_111_001;
155: inst = 9'b100_000010;
156: inst = 9'b001_111_001;
157: inst = 9'b100_000000;
158: inst = 9'b000_010_001;
159: inst = 9'b100_010111;
160: inst = 9'b001_010_001;
161: inst = 9'b0110_010_01;
162: inst = 9'b100_000011;
163: inst = 9'b001_001_010;
164: inst = 9'b111_111_110; // while(encrypted_char < 128) decrypt_rest
// non_space init
165: inst = 9'b100_000000; // r3 = idx = 0
166: inst = 9'b000_011_001;
167: inst = 9'b101_100_011; // r4 = [idx] = char
168: inst = 9'b100_000000; // r5 = space
169: inst = 9'b000_101_001;
170: inst = 9'b100_100000;
171: inst = 9'b001_101_001;
172: inst = 9'b100_000000;
173: inst = 9'b000_010_001;
174: inst = 9'b100_110000;
175: inst = 9'b001_010_001;
176: inst = 9'b0110_010_01;
177: inst = 9'b100_000010;
178: inst = 9'b001_001_010;
179: inst = 9'b111_100_101; // if char != space go to shift
180: inst = 9'b100_000001; // else idx = idx + 1
181: inst = 9'b001_011_001;
182: inst = 9'b100_000000;
183: inst = 9'b000_101_001;
184: inst = 9'b100_110111;
185: inst = 9'b001_101_001;
186: inst = 9'b100_000000;
187: inst = 9'b000_010_001;
188: inst = 9'b100_101001;
189: inst = 9'b001_010_001;
190: inst = 9'b0110_010_01;
191: inst = 9'b100_000011;
192: inst = 9'b001_001_010;
193: inst = 9'b111_011_101; // while(idx < 55) non_space
// r3 = index of first non space character
194: inst = 9'b100_000000; // r4 = idx = 0
195: inst = 9'b000_100_001;
196: inst = 9'b100_000000; // r7 = 0011 1111
197: inst = 9'b000_111_001;
198: inst = 9'b100_111111;
199: inst = 9'b001_111_001;
200: inst = 9'b0110_111_01; // r7 = 1111 1100
201: inst = 9'b100_000011; // r7 = 1111 1111
202: inst = 9'b001_111_001;
203: inst = 9'b010_111_011; // r7 = -offset
204: inst = 9'b100_000001;
205: inst = 9'b001_111_001;
206: inst = 9'b100_000000; // r7 = 55 - offset
207: inst = 9'b000_110_001;
208: inst = 9'b100_110111;
209: inst = 9'b001_110_001;
210: inst = 9'b001_111_110;
// r3 = offset, r4 = idx, r7 = 55 - offset
211: inst = 9'b100_000000; // r5 = offset
212: inst = 9'b000_101_001;
213: inst = 9'b001_101_011;
214: inst = 9'b001_101_100; // r5 = idx + offset
215: inst = 9'b101_010_101; // r2 = [idx+offset] = char
216: inst = 9'b110_010_100; // [idx] = [idx+offset]
217: inst = 9'b100_000001; //idx = idx + 1
218: inst = 9'b001_100_001;
219: inst = 9'b100_000000;
220: inst = 9'b000_010_001;
221: inst = 9'b100_110100;
222: inst = 9'b001_010_001;
223: inst = 9'b0110_010_01;
224: inst = 9'b100_000011;
225: inst = 9'b001_001_010;
226: inst = 9'b111_100_111; // while(idx < 55 - offset) shift_loop
//pad_spaces:
//	ldr r5, 0x20 // r5 = space
//	str r5, r4 // [idx] = space
//	addi r4, 1
//	ldr r6, 55 // r6 = 55
//	ldr r2, pad_spaces
//	bne r4, r6 // while(idx < 55) pad_spaces
227: inst = 9'b111_111_111; // halt
