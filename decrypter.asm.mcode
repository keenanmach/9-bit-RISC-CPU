// store the eight lfsr patterns into  memory positions 55-62
100_000000 // r3 = mem = 55
000_011_001
100_110111
001_011_001
100_000000 // r4 = 0010 1100
000_100_001
100_101100
001_100_001
0110_100_01 // r4 = 1011 0000 = 176
100_000010 // r4 = 1011 0010 = 178 = 0xb2
001_100_001
110_100_011 // [55] = 0xb2
100_000010 // r4 = 1011 0100 = 180 = 0xb4 (could optimize with lr)
001_100_001
100_000001 // r3 = 56
001_011_001
110_100_011 // [56] = 0xb4
100_000100 // r4 = 1011 1000 = 184 = 0xb8
001_100_001
100_000001 // r3 = 57
001_011_001
110_100_011 // [57] = 0xb8
100_001110 // r4 = 1100 0110 = 198 = 0xc6
001_100_001
100_000001 // r3 = 58
001_011_001
110_100_011 // [58] = 0xc6
100_001110 // r4 = 1101 0100 = 212 = 0xd4 (could optimize with lr)
001_100_001
100_000001 // r3 = 59
001_011_001
110_100_011 // [59] = 0xd4
100_001101 // r4 = 1110 0001 = 225 = 0xe1
001_100_001
100_000001 // r3 = 60
001_011_001
110_100_011 // [60] = 0xe1
100_010010 // r4 = 1111 0011 = 243 = 0xf3
001_100_001
100_000001 // r3 = 61
001_011_001
110_100_011 // [60] = 0xf3
100_000111 // r4 = 1111 1010 ==250 = 0xfa
001_100_001
100_000001 // r3 = 62
001_011_001
110_100_011 // [62] = 0xfa
// done storing lfsr patterns into memory
// now find the lfsr pattern
100_000000 // r3 = idx = 54
000_011_001
100_110111
001_011_001
// loop to check each lfsr pattern
100_000001 // idx = idx + 1 (starts at 55), check next lfsr state
001_011_001
100_000000 // r6 = encrypted_char = 64
000_110_001
100_111111
001_110_001
001_110_001
100_000001
001_110_001
101_100_011 // r4 = [idx] = lfsr
101_101_110 // r5 = [encrypted_char] = state
100_100000 // lr = space
010_101_001 // r5 = state ^ space
100_000001 // r6 = encrypted_char + 1
001_110_001
// loop to check the state eight times
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
100_000000 // r0 = parity = 0000 0001
000_000_001
100_000001
001_000_001
100_000001 // lr = 0000 0001
000_001_100 // lr = lfsr & 0000 0001
000_001_101 // lr = lfsr & 0000 0001 & x
010_000_001 // r0 = parity ^ (lfsr & 0000 0001 & x)
100_000010 // lr = 0000 0010
000_001_101 // lr = 0000 0010 & x
000_001_100 // lr = 0000 0010 & x & lfsr
0111_001_00 // lr = (0000 0010 & x & lfsr) >> 1
010_000_001 // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
100_000100 // lr = 0000 0100
000_001_101 // lr = 0000 0100 & x
000_001_100 // lr = 0000 0100 & x & lfsr
0111_001_01 // lr = (0000 0100 & x & lfsr) >> 2
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
100_001000 // lr = 0000 100
000_001_101 // lr = 0000 1000 & x
000_001_100 // lr = 0000 1000 & x & lfsr
0111_001_10 // lr = (0000 1000 & x & lfsr) >> 3
010_000_001 // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
100_010000 // lr = 0001 0000
000_001_101 // lr = 0001 0000 & x
000_001_100 // lr = 0001 0000 & x & lfsr
0111_001_11 // lr = (0001 0000 & x & lfsr) >> 4
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
100_100000 // lr = 0010 0000
000_001_101 // lr = 0010 0000 & x
000_001_100 // lr = 0010 0000 & x & lfsr
0111_001_100 // lr = (0010 0000 & x & lfsr) >> 5
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
100_100000 // lr = 0010 0000
0110_001_00 // lr = 0100 0000
000_001_101 // lr = 0100 0000 & x
000_001_100 // lr = 0100 0000 & x & lfsr
0111_001_100 // lr = (0100 0000 & x & lfsr) >> 6
0111_001_00
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
100_100000 // lr = 0010 0000
0110_001_01 // lr = 1000 0000
000_001_101 // lr = 1000 0000 & x
000_001_100 // lr = 1000 0000 & x & lfsr
0111_001_100 // lr = (1000 0000 & x & lfsr) >> 7
0111_001_01
010_000_001 // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
0110_101_00 // r5 = x << 1
001_101_000 // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
101_111_110 // r7 = [encrypted_char] = mem_state
100_100000 // lr = space
010_111_001 // r7 = mem_state ^ space
100_000001 // lr = 0000 0001
100_000000 // r0 = state
000_000_001
001_000_101
000_000_001 // r0 = state lsb
000_111_001 // r7 = mem_state lsb
100_000000
000_010_001
100_001101
001_010_001
0110_010_01
100_000011
001_001_010
111_000_111 // if lsbs are not the same check next lfsr state
// else continue
100_000001 // r6 = encrypted_char + 1
001_110_001
100_000000 // r0 = 73
000_000_001
100_111111
001_000_001
001_000_001
100_001010
001_000_001
100_000000
000_010_001
100_010001
001_010_001
0110_010_01
100_000011
001_001_010
111_110_000 // while(encrypted_char < 73) check_spaces
// if reach here state found, r5=state, r4=lfsr
100_000000 // idx = 0
000_011_001
// getLSB - stores in r0, lr, assumes r4 = lfsr, r5 = state
100_000000 // r0 = parity = 0000 0001
000_000_001
100_000001
001_000_001
100_000001 // lr = 0000 0001
000_001_100 // lr = lfsr & 0000 0001
000_001_101 // lr = lfsr & 0000 0001 & x
010_000_001 // r0 = parity ^ (lfsr & 0000 0001 & x)
100_000010 // lr = 0000 0010
000_001_101 // lr = 0000 0010 & x
000_001_100 // lr = 0000 0010 & x & lfsr
0111_001_00 // lr = (0000 0010 & x & lfsr) >> 1
010_000_001 // r0 = parity ^ ((0000 0010 & x & lfsr) >> 1)
100_000100 // lr = 0000 0100
000_001_101 // lr = 0000 0100 & x
000_001_100 // lr = 0000 0100 & x & lfsr
0111_001_01 // lr = (0000 0100 & x & lfsr) >> 2
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 2)
100_001000 // lr = 0000 100
000_001_101 // lr = 0000 1000 & x
000_001_100 // lr = 0000 1000 & x & lfsr
0111_001_10 // lr = (0000 1000 & x & lfsr) >> 3
010_000_001 // r0 = parity ^ ((0000 1000 & x & lfsr) >> 3)
100_010000 // lr = 0001 0000
000_001_101 // lr = 0001 0000 & x
000_001_100 // lr = 0001 0000 & x & lfsr
0111_001_11 // lr = (0001 0000 & x & lfsr) >> 4
010_000_001 // r0 = parity ^ ((0000 0100 & x & lfsr) >> 4)
100_100000 // lr = 0010 0000
000_001_101 // lr = 0010 0000 & x
000_001_100 // lr = 0010 0000 & x & lfsr
0111_001_100 // lr = (0010 0000 & x & lfsr) >> 5
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 5)
100_100000 // lr = 0010 0000
0110_001_00 // lr = 0100 0000
000_001_101 // lr = 0100 0000 & x
000_001_100 // lr = 0100 0000 & x & lfsr
0111_001_100 // lr = (0100 0000 & x & lfsr) >> 6
0111_001_00
010_000_001 // r0 = parity ^ ((0010 0000 x & lfsr) >> 6)
100_100000 // lr = 0010 0000
0110_001_01 // lr = 1000 0000
000_001_101 // lr = 1000 0000 & x
000_001_100 // lr = 1000 0000 & x & lfsr
0111_001_100 // lr = (1000 0000 & x & lfsr) >> 7
0111_001_01
010_000_001 // r0 = parity ^ ((1000 0000 x & lfsr) >> 7)
// r0 = getLSB(lfsr=r4, state=r5)
0110_101_00 // r5 = x << 1
001_101_000 // r5 = (x << 1) + getLSB(lfsr=r4, state=r5)
101_111_110 // r7 = [encrypted_char]
010_111_101 // r7 = [encrypted_char] ^ state
110_111_011 // [idx] = [encrypted_char] ^ state = decrypted_char
100_000001 // idx = idx + 1
001_011_001
100_000001 // encrypted_char = encrypted_char + 1
001_110_001
100_000000
000_111_001
100_111111
001_111_001
001_111_001
001_111_001
100_000010
001_111_001
100_000000
000_010_001
100_101000
001_010_001
0110_010_01
100_000000
001_001_010
111_111_110 // while(encrypted_char < 128) decrypt_rest
111_111_111 // halt
